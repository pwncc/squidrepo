{
  {
    "cloud",
    "package.preload[\"argparse\"] = function(...)\
  local function errorf(msg, ...)\
    error(msg:format(...), 0)\
  end\
  local function setter(arg, result, value)\
    result[arg.name] = value or true\
  end\
  local parser = { __name = \"ArgParser\" }\
  parser.__index = parser\
  function parser:add(names, arg)\
    if type(names) == \"string\" then names = { names } end\
    arg.names = names\
    for i = 1, #names do\
      local name = names[i]\
      if name:sub(1, 2) == \"--\" then self.options[name:sub(3)] = arg\
      elseif name:sub(1, 1) == \"-\" then self.flags[name:sub(2)] = arg\
      else self.arguments[#self.arguments + 1] = arg; arg.argument = true end\
    end\
    table.insert(self.list, #self.list, arg)\
    if arg.action == nil then arg.action = setter end\
    if arg.required == nil then arg.required = names[1]:sub(1, 1) ~= \"-\" end\
    if arg.name == nil then arg.name = names[1]:gsub(\"^-+\", \"\") end\
    if arg.mvar == nil then arg.mvar = arg.name:upper() end\
  end\
  function parser:parse(...)\
    local args = table.pack(...)\
    local i, n = 1, #args\
    local arg_idx = 1\
    local result = {}\
    while i <= n do\
      local arg = args[i]\
      i = i + 1\
      if arg:find(\"^%-%-([^=]+)=(.+)$\") then\
        local name, value = arg:match(\"^%-%-([^=]+)=(.+)$\")\
        local arg = self.options[name]\
        if not arg then errorf(\"Unknown argument %q\", name) end\
        if not arg.many and result[arg.name] ~= nil then errorf(\"%s has already been set\", name) end\
        if not arg.value then errorf(\"%s does not accept a value\", name) end\
        arg:action(result, value)\
      elseif arg:find(\"^%-%-(.*)$\") then\
        local name = arg:match(\"^%-%-(.*)$\")\
        local arg = self.options[name]\
        if not arg then errorf(\"Unknown argument %q\", name) end\
        if not arg.many and result[arg.name] ~= nil then errorf(\"%s has already been set\", name) end\
        if arg.value then\
          local value = args[i]\
          i = i + 1\
          if not value then errorf(\"%s needs a value\", name) end\
          arg:action(result, value)\
        else\
          arg:action(result)\
        end\
      elseif arg:find(\"^%-(.+)$\") then\
        local flags = arg:match(\"^%-(.+)$\")\
        for j = 1, #flags do\
          local name = flags:sub(j, j)\
          local arg = self.flags[name]\
          if not arg then errorf(\"Unknown argument %q\", name) end\
          if not arg.many and result[arg.name] ~= nil then errorf(\"%s has already been set\", name) end\
          if arg.value then\
            local value\
            if j == #flags then\
              value = args[i]\
              i = i + 1\
            else\
              value = flags:sub(j + 1)\
            end\
            if not value then errorf(\"%s expects a value\", name) end\
            arg:action(result, value)\
            break\
          else\
            arg:action(result)\
          end\
        end\
      else\
        local argument = self.arguments[arg_idx]\
        if argument then\
          argument:action(result, arg)\
          arg_idx = arg_idx + 1\
        else\
          errorf(\"Unexpected argument %q\", arg)\
        end\
      end\
    end\
    for i = 1, #self.list do\
      local arg = self.list[i]\
      if arg and arg.required and result[arg.name] == nil then\
        errorf(\"%s is required (use -h to see usage)\", arg.name)\
      end\
    end\
    return result\
  end\
  local function get_usage(arg)\
    if arg.argument then return arg.mvar\
    elseif arg.value then return arg.names[1] .. \"=\" .. arg.mvar\
    else return arg.names[1]\
    end\
  end\
  local function create(prefix)\
    local parser = setmetatable({\
      options = {},\
      flags = {},\
      arguments = {},\
      list = {},\
    }, parser)\
    parser:add({ \"-h\", \"--help\", \"-?\" }, {\
      value = false, required = false,\
      doc = \"Show this help message\",\
      action = function()\
        if prefix then print(prefix) print() end\
        print(\"USAGE\")\
        local max = 0\
        for i = 1, #parser.list do max = math.max(max, #get_usage(parser.list[i])) end\
        local format = \"%\" .. (max +1 ) .. \"s %s\"\
        for i = 1, #parser.list do\
          local arg = parser.list[i]\
          print(format:format(get_usage(arg), arg.doc or \"\"))\
        end\
        error(\"\", 0)\
      end,\
    })\
    return parser\
  end\
  return create\
end\
package.preload[\"framebuffer\"] = function(...)\
  local colour_lookup = {}\
  for i = 0, 16 do\
    colour_lookup[string.format(\"%x\", i)] = 2 ^ i\
  end\
  local void = function() end\
  local function empty(colour, width, height)\
    local function is_colour() return colour end\
    return {\
      write = void, blit = void, clear = void, clearLine = void,\
      setCursorPos = void, setCursorBlink = void,\
      setPaletteColour = void, setPaletteColor = void,\
      setTextColour = void, setTextColor = void, setBackgroundColour = void, setBackgroundColor = void,\
      getTextColour = void, getTextColor = void, getBackgroundColour = void, getBackgroundColor = void,\
      scroll = void,\
      isColour = is_colour, isColor = is_colour,\
      getSize = function() return width, height end,\
      getPaletteColour = term.native().getPaletteColour, getPaletteColor = term.native().getPaletteColor,\
    }\
  end\
  local function buffer(original)\
    local text = {}\
    local text_colour = {}\
    local back_colour = {}\
    local palette = {}\
    local cursor_x, cursor_y = 1, 1\
    local cursor_blink = false\
    local cur_text_colour = \"0\"\
    local cur_back_colour = \"f\"\
    local sizeX, sizeY = original.getSize()\
    local color = original.isColor()\
    local dirty = false\
    local redirect = {}\
    if original.getPaletteColour then\
      for i = 0, 15 do\
        local c = 2 ^ i\
        palette[c] = { original.getPaletteColour( c ) }\
      end\
    end\
    function redirect.write(writeText)\
      writeText = tostring(writeText)\
      original.write(writeText)\
      dirty = true\
      if cursor_y > sizeY or cursor_y < 1 or cursor_x + #writeText <= 1 or cursor_x > sizeX then\
        cursor_x = cursor_x + #writeText\
        return\
      end\
      if cursor_x < 1 then\
        writeText = writeText:sub(-cursor_x + 2)\
        cursor_x = 1\
      elseif cursor_x + #writeText > sizeX then\
        writeText = writeText:sub(1, sizeX - cursor_x + 1)\
      end\
      local lineText = text[cursor_y]\
      local lineColor = text_colour[cursor_y]\
      local lineBack = back_colour[cursor_y]\
      local preStop = cursor_x - 1\
      local preStart = math.min(1, preStop)\
      local postStart = cursor_x + #writeText\
      local postStop = sizeX\
      local sub, rep = string.sub, string.rep\
      text[cursor_y] = sub(lineText, preStart, preStop)..writeText..sub(lineText, postStart, postStop)\
      text_colour[cursor_y] = sub(lineColor, preStart, preStop)..rep(cur_text_colour, #writeText)..sub(lineColor, postStart, postStop)\
      back_colour[cursor_y] = sub(lineBack, preStart, preStop)..rep(cur_back_colour, #writeText)..sub(lineBack, postStart, postStop)\
      cursor_x = cursor_x + #writeText\
    end\
    function redirect.blit(writeText, writeFore, writeBack)\
      original.blit(writeText, writeFore, writeBack)\
      dirty = true\
      if cursor_y > sizeY or cursor_y < 1 or cursor_x + #writeText <= 1 or cursor_x > sizeX then\
        cursor_x = cursor_x + #writeText\
        return\
      end\
      if cursor_x < 1 then\
        writeText = writeText:sub(-cursor_x + 2)\
        writeFore = writeFore:sub(-cursor_x + 2)\
        writeBack = writeBack:sub(-cursor_x + 2)\
        cursor_x = 1\
      elseif cursor_x + #writeText > sizeX then\
        writeText = writeText:sub(1, sizeX - cursor_x + 1)\
        writeFore = writeFore:sub(1, sizeX - cursor_x + 1)\
        writeBack = writeBack:sub(1, sizeX - cursor_x + 1)\
      end\
      local lineText = text[cursor_y]\
      local lineColor = text_colour[cursor_y]\
      local lineBack = back_colour[cursor_y]\
      local preStop = cursor_x - 1\
      local preStart = math.min(1, preStop)\
      local postStart = cursor_x + #writeText\
      local postStop = sizeX\
      local sub, rep = string.sub, string.rep\
      text[cursor_y] = sub(lineText, preStart, preStop)..writeText..sub(lineText, postStart, postStop)\
      text_colour[cursor_y] = sub(lineColor, preStart, preStop)..writeFore..sub(lineColor, postStart, postStop)\
      back_colour[cursor_y] = sub(lineBack, preStart, preStop)..writeBack..sub(lineBack, postStart, postStop)\
      cursor_x = cursor_x + #writeText\
    end\
    function redirect.clear()\
      for i = 1, sizeY do\
        text[i] = string.rep(\" \", sizeX)\
        text_colour[i] = string.rep(cur_text_colour, sizeX)\
        back_colour[i] = string.rep(cur_back_colour, sizeX)\
      end\
      dirty = true\
      return original.clear()\
    end\
    function redirect.clearLine()\
      if cursor_y > sizeY or cursor_y < 1 then\
        return\
      end\
      text[cursor_y] = string.rep(\" \", sizeX)\
      text_colour[cursor_y] = string.rep(cur_text_colour, sizeX)\
      back_colour[cursor_y] = string.rep(cur_back_colour, sizeX)\
      dirty = true\
      return original.clearLine()\
    end\
    function redirect.getCursorPos()\
      return cursor_x, cursor_y\
    end\
    function redirect.setCursorPos(x, y)\
      cursor_x = math.floor(tonumber(x)) or cursor_x\
      cursor_y = math.floor(tonumber(y)) or cursor_y\
      if x ~= cursor_x or y ~= cursor_y then dirty = true end\
      return original.setCursorPos(x, y)\
    end\
    function redirect.setCursorBlink(b)\
      cursor_blink = b\
      if cursor_blink ~= b then dirty = true end\
      return original.setCursorBlink(b)\
    end\
    function redirect.getSize()\
      return sizeX, sizeY\
    end\
    function redirect.scroll(n)\
      n = tonumber(n) or 1\
      local empty_text = string.rep(\" \", sizeX)\
      local empty_text_colour = string.rep(cur_text_colour, sizeX)\
      local empty_back_colour = string.rep(cur_back_colour, sizeX)\
      if n > 0 then\
        for i = 1, sizeY do\
          text[i] = text[i + n] or empty_text\
          text_colour[i] = text_colour[i + n] or empty_text_colour\
          back_colour[i] = back_colour[i + n] or empty_back_colour\
        end\
      elseif n < 0 then\
        for i = sizeY, 1, -1 do\
          text[i] = text[i + n] or empty_text\
          text_colour[i] = text_colour[i + n] or empty_text_colour\
          back_colour[i] = back_colour[i + n] or empty_back_colour\
        end\
      end\
      dirty = true\
      return original.scroll(n)\
    end\
    function redirect.setTextColour(clr)\
      cur_text_colour = colour_lookup[clr] or string.format(\"%x\", math.floor(math.log(clr) / math.log(2)))\
      dirty = true\
      return original.setTextColour(clr)\
    end\
    redirect.setTextColor = redirect.setTextColour\
    function redirect.setBackgroundColour(clr)\
      cur_back_colour = colour_lookup[clr] or string.format(\"%x\", math.floor(math.log(clr) / math.log(2)))\
      dirty = true\
      return original.setBackgroundColour(clr)\
    end\
    redirect.setBackgroundColor = redirect.setBackgroundColour\
    function redirect.isColour()\
      return color == true\
    end\
    redirect.isColor = redirect.isColour\
    function redirect.getTextColour()\
      return 2 ^ tonumber(cur_text_colour, 16)\
    end\
    redirect.getTextColor = redirect.getTextColour\
    function redirect.getBackgroundColour()\
      return 2 ^ tonumber(cur_back_colour, 16)\
    end\
    redirect.getBackgroundColor = redirect.getBackgroundColour\
    if original.getPaletteColour then\
      function redirect.setPaletteColour(colour, r, g, b)\
        local palcol = palette[colour]\
        if not palcol then error(\"Invalid colour (got \" .. tostring(colour) .. \")\", 2) end\
        if type(r) == \"number\" and g == nil and b == nil then\
            palcol[1], palcol[2], palcol[3] = colours.rgb8(r)\
        else\
            if type(r) ~= \"number\" then error(\"bad argument #2 (expected number, got \" .. type(r) .. \")\", 2) end\
            if type(g) ~= \"number\" then error(\"bad argument #3 (expected number, got \" .. type(g) .. \")\", 2) end\
            if type(b) ~= \"number\" then error(\"bad argument #4 (expected number, got \" .. type(b ) .. \")\", 2 ) end\
            palcol[1], palcol[2], palcol[3] = r, g, b\
        end\
        dirty = true\
        return original.setPaletteColour(colour, r, g, b)\
      end\
      redirect.setPaletteColor = redirect.setPaletteColour\
      function redirect.getPaletteColour(colour)\
        local palcol = palette[colour]\
        if not palcol then error(\"Invalid colour (got \" .. tostring(colour) .. \")\", 2) end\
        return palcol[1], palcol[2], palcol[3]\
      end\
      redirect.getPaletteColor = redirect.getPaletteColour\
    end\
    function redirect.is_dirty() return dirty end\
    function redirect.clear_dirty() dirty = false end\
    local function char(x)\
      if x <= 0 then return \"00\"\
      elseif x >= 255 then return \"ff\"\
      else return (\"%02x\"):format(x) end\
    end\
    function redirect.serialise()\
      local palettes = {}\
      for i = 0, 15 do\
        local c = palette[2^i]\
        palettes[i * 3 + 1] = char(math.floor(c[1] * 255))\
        palettes[i * 3 + 2] = char(math.floor(c[2] * 255))\
        palettes[i * 3 + 3] = char(math.floor(c[3] * 255))\
      end\
      return char(sizeX) .. char(sizeY) .. char(cursor_x) .. char(cursor_y)\
          .. (cursor_blink and \"1\" or \"0\") .. cur_text_colour .. cur_back_colour\
          .. table.concat(palettes)\
          .. table.concat(text)\
          .. table.concat(text_colour)\
          .. table.concat(back_colour)\
    end\
    redirect.clear()\
    return redirect\
  end\
  return { buffer = buffer, empty = empty }\
end\
package.preload[\"encode\"] = function(...)\
  local function fletcher_32(str)\
    local s1, s2, len, byte = 0, 0, #str, string.byte\
    if #str % 2 ~= 0 then str = str .. \"\\0\" end\
    for i = 1, #str, 2 do\
      local c1, c2 = byte(str, i, i + 1)\
      s1 = (s1 + c1 + (c2 * 0x100)) % 0xFFFF\
      s2 = (s2 + s1) % 0xFFFF\
    end\
    return s2 * 0x10000 + s1\
  end\
  return {\
    fletcher_32 = fletcher_32\
  }\
end\
local tonumber = tonumber\
local argparse = require \"argparse\"\
local function is_help(cmd)\
  return cmd == \"help\" or cmd == \"--help\" or cmd == \"-h\" or cmd == \"-?\"\
end\
local cloud = _G.cloud_catcher\
if cloud then\
  local id, file, forceWrite = nil, nil, false\
  local usage = ([[\
cloud: <subcommand> [args]\
Communicate with\
Subcommands:\
  edit <file> Open a file on the remote server.\
  token       Display the token for this\
              connection.\
]]):gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\")\
    local subcommand = ...\
    if subcommand == \"edit\" or subcommand == \"e\" then\
      local arguments = argparse(\"cloud edit: Edit a file in the remote viewer\")\
      arguments:add({ \"file\" }, { doc = \"The file to upload\" })\
      local result = arguments:parse(select(2, ...))\
      local file = result.file\
      if is_help(file) then print(usage) return\
      elseif file == nil then printError(usage) error()\
      end\
      local resolved = shell.resolve(file)\
      if not fs.exists(resolved) and not resolved:find(\"%.\") then\
        local extension = settings.get(\"edit.default_extension\", \"\")\
        if extension ~= \"\" and type(extension) == \"string\" then\
            resolved = resolved .. \".\" .. extension\
        end\
      end\
      if fs.isDir(resolved) then error((\"%q is a directory\"):format(file), 0) end\
      if fs.isReadOnly(resolved) then\
        if fs.exists(resolved) then\
          print((\"%q is read only, will not be able to modify\"):format(file))\
        else\
          error((\"%q does not exist\"):format(file), 0)\
        end\
      end\
      local ok, err = cloud.edit(resolved)\
      if not ok then error(err, 0) end\
      return\
    elseif subcommand == \"token\" or subcommand == \"-t\" then print(cloud.token()) return\
    elseif is_help(subcommand) then print(usage) return\
    elseif subcommand == nil then printError(usage) error()\
    else error((\"%q is not a cloud catcher subcommand, run with --h for more info\"):format(subcommand), 0)\
    end\
    error(\"unreachable\")\
    return\
end\
local current_path = shell.getRunningProgram()\
local current_name = fs.getName(current_path)\
local framebuffer, encode = require(\"framebuffer\"), require(\"encode\")\
local arguments = argparse(current_name .. \": Interact with this computer remotely\")\
arguments:add({ \"token\" }, { doc = \"The token to use when connecting\" })\
arguments:add({ \"--term\", \"-t\" }, { value = true, doc = \"Terminal dimensions or none to hide\" })\
arguments:add({ \"--http\", \"-H\" }, { value = false, doc = \"Use HTTP instead of HTTPs\" })\
local result = arguments:parse(...)\
local token = result.token\
if #token ~= 32 or token:find(\"[^%a%d]\") then\
  error(\"Invalid token (must be 32 alpha-numeric characters)\", 0)\
end\
local term_opts = result.term\
local previous_term = term.current()\
local parent_term = previous_term\
if term_opts then\
  if term_opts == \"none\" then\
    parent_term = framebuffer.empty(true, term.getSize())\
  elseif term_opts:find(\"^(%d+)x(%d+)$\") then\
    local w, h = term_opts:match(\"^(%d+)x(%d+)$\")\
    if w == 0 or h == 0 then error(\"Terminal cannot have 0 size\", 0) end\
    parent_term = framebuffer.empty(true, tonumber(w), tonumber(h))\
  else\
    error(\"Unknown format for term: expected \\\"none\\\" or \\\"wxh\\\"\", 0)\
  end\
end\
local w, h = parent_term.getSize()\
if w * h > 5000 then error(\"Terminal is too large to handle\", 0) end\
local protocol = result.http and \"ws\" or \"wss\"\
local url = protocol .. \"://cloud-catcher.squiddev.cc/host?id=\" .. token\
local remote, err = http.websocket(url)\
if not remote then error(\"Cannot connect to cloud catcher server: \" .. err, 0) end\
do\
  local max_packet_size = 16384\
  _G.cloud_catcher = {\
    token = function() return token end,\
    edit = function(file, force)\
      local contents\
      local handle = fs.open(file, \"rb\")\
      if handle then\
        contents = handle.readAll()\
        handle.close()\
      else\
        contents = \"\"\
      end\
      local encoded = contents\
      if #file + #encoded + 5 > max_packet_size then\
        return false, \"This file is too large to be edited remotely\"\
      end\
      local check = encode.fletcher_32(contents)\
      local flag = 0x02\
      if fs.isReadOnly(file) then flag = flag + 0x08 end\
      remote.send((\"30%02x%08x%s\\0%s\"):format(flag, check, file, contents))\
      return true\
    end\
  }\
  shell.setAlias(\"cloud\", \"/\" .. current_path)\
  local function complete_multi(text, options)\
    local results = {}\
    for i = 1, #options do\
        local option, add_spaces = options[i][1], options[i][2]\
        if #option + (add_spaces and 1 or 0) > #text and option:sub(1, #text) == text then\
            local result = option:sub(#text + 1)\
            if add_spaces then table.insert( results, result .. \" \" )\
            else table.insert( results, result )\
            end\
        end\
    end\
    return results\
  end\
  local subcommands = { { \"edit\", true }, { \"token\", false } }\
  shell.setCompletionFunction(current_path, function(shell, index, text, previous_text)\
    if _G.cloud_catcher == nil then return end\
    if index == 1 then\
      return complete_multi(text, subcommands)\
    elseif index == 2 and previous_text[2] == \"edit\" then\
        return fs.complete(text, shell.dir(), true, false)\
    end\
  end)\
end\
local co = coroutine.create(shell.run)\
local buffer = framebuffer.buffer(parent_term)\
term.redirect(buffer)\
term.clear()\
term.setCursorPos(1, 1)\
local ok, res = coroutine.resume(co, \"shell\")\
local last_change, last_timer = os.clock(), nil\
while ok and coroutine.status(co) ~= \"dead\" do\
  if last_timer == nil and buffer.is_dirty() then\
    local now = os.clock()\
    if now - last_change < 0.04 then\
      last_timer = os.startTimer(0)\
    else\
      buffer.clear_dirty()\
      last_change = os.clock()\
      remote.send(\"10\" .. buffer.serialise())\
    end\
  end\
  local event = table.pack(coroutine.yield())\
  if event[1] == \"timer\" and event[2] == last_timer then\
    last_timer = nil\
    buffer.clear_dirty()\
    last_change = os.clock()\
    remote.send(\"10\" .. buffer.serialise())\
  elseif event[1] == \"websocket_closed\" and event[2] == url then\
    ok, res = false, \"Connection lost\"\
    remote = nil\
  elseif event[1] == \"websocket_message\" and event[2] == url then\
    local message = event[3]\
    local code = tonumber(message:sub(1, 2), 16)\
    if code == 0x00 or code == 0x01 then\
      ok, res = false, \"Connection lost\"\
    elseif code == 0x02 then\
      remote.send(\"02\")\
    elseif code == 0x20 then\
      os.queueEvent(\"paste\", message:sub(3))\
    elseif code == 0x21 then\
      local kind, code, char = message:match(\"^..(%x)(%x%x)(.*)$\")\
      if kind then\
        kind, code = tonumber(kind, 16), tonumber(code, 16)\
        if kind == 0 or kind == 1 then\
          os.queueEvent(\"key\", code, kind == 1)\
          if char ~= \"\" then os.queueEvent(\"char\", char) end\
        elseif kind == 2 then os.queueEvent(\"key_up\", code)\
        end\
      end\
    elseif code == 0x22 then\
      local kind, code, x, y = message:match(\"^..(%x)(%x)(%x%x)(%x%x)$\")\
      if kind then\
        kind, code, x, y = tonumber(kind, 16), tonumber(code, 16), tonumber(x, 16), tonumber(y, 16)\
        if kind == 0 then os.queueEvent(\"mouse_click\", code, x, y)\
        elseif kind == 1 then os.queueEvent(\"mouse_up\", code, x, y)\
        elseif kind == 2 then os.queueEvent(\"mouse_drag\", code, x, y)\
        elseif kind == 3 then os.queueEvent(\"mouse_scroll\", code - 1, x, y)\
        end\
      end\
    elseif code == 0x30 then\
      local flags, checksum, name, contents = message:match(\"^..(%x%x)(%x%x%x%x%x%x%x%x)([^\\0]+)\\0(.*)$\")\
      if flags then\
        flags, checksum = tonumber(flags, 16), tonumber(checksum, 16)\
        local ok = bit32.band(flags, 0x1) == 1\
        local expected_checksum = 0\
        local handle = fs.open(name, \"rb\")\
        if handle then\
          local contents = handle.readAll()\
          handle.close()\
          expected_checksum = encode.fletcher_32(contents)\
        end\
        if not ok then\
          ok = expected_checksum == 0 or checksum == expected_checksum\
        end\
        local handle = ok and fs.open(name, \"wb\")\
        if handle then\
          handle.write(contents)\
          handle.close()\
          remote.send((\"31%08x%s\"):format(encode.fletcher_32(contents), name))\
        else\
          remote.send((\"32%08x%s\"):format(expected_checksum, name))\
        end\
      end\
    end\
  elseif res == nil or event[1] == res or event[1] == \"terminate\" then\
    ok, res = coroutine.resume(co, table.unpack(event, 1, event.n))\
  end\
end\
term.redirect(previous_term)\
if previous_term == parent_term then\
  term.clear()\
  term.setCursorPos(1, 1)\
  if previous_term.endPrivateMode then previous_term.endPrivateMode() end\
end\
_G.cloud_catcher = nil\
shell.clearAlias(\"cloud\")\
shell.getCompletionInfo()[current_path] = nil\
if remote ~= nil then remote.close() end\
if not ok then error(res, 0) end",
  },
  meta = {
    dependencies = "none",
    info = "Cloud Catcher\
A web interface for computercraft computers\
\
Getting started\
\
Visit https://cloud-catcher.squiddev.cc/\
\
Follow the instructions there\
\
One can run cloud edit <filename> to edit a file remotely.\
Open any remote file for inspection, make some modifications, and save it back to the computer.\
Share your session with other people, allowing for a true multiplayer-notepad.",
  },
}
